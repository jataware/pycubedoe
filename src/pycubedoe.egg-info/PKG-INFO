Metadata-Version: 2.1
Name: pycubedoe
Version: 0.0.1
Summary: Generate ssdesign of experiements by constructing a nearly orthogonal latin hypercube with user-defined factors and appropriate factor ranges.
Home-page: https://github.com/travis-jat/python-pycubedoe
Author: Travis Hartman
Author-email: travis@jataware.com
License: LGPL-3.0-or-later
Project-URL: Changelog, https://github.com/travis-jat/python-pycubedoe/blob/master/CHANGELOG.rst
Project-URL: Issue Tracker, https://github.com/travis-jat/python-pycubedoe/issues
Description: ========
        Overview
        ========
        
        
        
        Generates design of experiements by constructing a nearly orthogonal latin hypercube with user-defined factors and
        appropriate factor levels.
        
        * Free software: GNU Lesser General Public License v3 or later (LGPLv3+)
        
        Overview
        ========
        
        `pycubedoe` generates a design of experiements (DOE) by constructing a nearly orthogonal latin hypercube with user-defined factors and
        appropriate factor levels. The underling space-filling matrices are provided by the NOLHDesigns_v6.xls: Generating nearly orthogonal Latin Hypercube designs. More information on the NOLHDesigns can be found at: https://nps.edu/web/seed/software-downloads.
        
        Installation
        ============
        
        ::
        
            pip3 install pycubedoe
        
        You can also install the in-development version with::
        
            pip3 install https://github.com/travis-jat/python-pycubedoe/archive/master.zip
        
        
        Documentation
        =============
        
        
        To use the project:
        
        
        1. import the package:
        .. code-block:: python
            import pycubedoe
        
        2. Create a dictionary of your desired factors and their associated levels. pycubedoe can support both numeric and categorical factors. For each factor, build a dictionary as described below:
        
           For numeric factors:     "factor name": [min Value, max Value, number of desired decimal places]
           For categorical factors: "factor name": ["list", "of", "categorical", "levels"]
        
        For each factor-type, build a dictionary of all your factors under the appropriate dictionary key as shown below:
        
        Numeric Factors Only:
        .. code-block:: python
        
            params = {"numeric": {"a":[1,5,2],
                                  "b":[5,10,1],
                                  "c":[3,4,3]
                                  }
                     }
        
        Categorical Factors Only:
        .. code-block:: python
        
            params = {"categorical": {"color": ["red", "white", "blue"],
                                      "temperature": ["super-cold", "balmy"], 
                                      "ice":["lo", "med", "hi"]
                                      }
                     }
        
        Both Numeric and Categorical Factors:
        .. code-block:: python
        
            params =  {"numeric": {"a":[1,5,2],
                                   "b":[5,10,1],
                                   "c":[3,4,3]
                                  },
                       "categorical": {"color": ["red", "white", "blue"],
                                       "temp": ["super-cold", "balmy"], 
                                       "ice":["lo", "med", "hi"]
                                       }
                       }
        
        3. Build the Design of Experiments (DOE)
        
        
            DOE = pycubeDOE(params)
        
        4. There is a helper function ['designPoints(DOE)'] that iterates over each row of your DOE. First you will need to assign each design point value to a factor name. Below is an example using `YOUR_MODEL` as a model:
        
        .. code-block:: python
        
          def YOUR_MODEL(designPT):
              '''  
              Example on how to parse the design point from the DOE and implement some logic
              '''
        
              #Assign your variable values from the DOE design point
              a = designPT[0]
              b = designPT[1]
              c = designPT[2]
              color = designPT[3]
              temp = designPT[4]
              ice = designPT[5]
              
              ### DO SOMETHING WITH YOUR DESIGN POINT, for example:
              if ice == "hi" and temp == "super-cold":
                  return round(a*b*c,2)
              else:
                  return 0
        
        
        Then run the design points over `YOUR_MODEL` where we call pycubedoe's `designPoints` function:
        
        .. code-block:: python
            modelResults = []
            for designPT in designPoints(DOE):
                sim = YOUR_MODEL(designPT)
                modelResults.append(sim)
            print(modelResults) 
        
        Development
        ===========
        
        To run all the tests run::
        
            tox
        
        Note, to combine the coverage data from all the tox environments run:
        
        .. list-table::
            :widths: 10 90
            :stub-columns: 1
        
            - - Windows
              - ::
        
                    set PYTEST_ADDOPTS=--cov-append
                    tox
        
            - - Other
              - ::
        
                    PYTEST_ADDOPTS=--cov-append tox
        
        
        Changelog
        =========
        
        0.0.1 (2021-02-17)
        ------------------
        
        * First release on PyPI.
        
Keywords: design of experiements,DOE,hypercube,latin hypercube,design point
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)Operating System :: Unix
Classifier: Operating System :: POSIX
Classifier: Operating System :: Microsoft :: Windows
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Programming Language :: Python :: Implementation :: PyPy
Classifier: Topic :: Utilities
Requires-Python: >=3.6
Provides-Extra: dev
